{"version":3,"sources":["Componets/Contacts/images/male.svg","Componets/Contacts/images/female.svg","Componets/Contacts/images/anonymous.svg","Componets/Contacts/Contact.js","Componets/Contacts/Search.js","Componets/Contacts/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","props","className","firstName","lastName","phone","src","gender","alt","Search","type","id","value","search","onChange","searchChange","placeholder","toggleTick","defaultChecked","genderImg","male","female","anonymous","contacts","Contacts","state","filtered","event","setState","target","filterContacts","checked","this","prevState","filter","contact","toLowerCase","includes","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e861652.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/male.037e22c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/female.07ea4eab.svg\";","module.exports = __webpack_public_path__ + \"static/media/anonymous.e5c28124.svg\";","import React from \"react\";\r\n\r\nconst Contact = (props) => {\r\n    return (\r\n        <div className=\"contact\">\r\n            <div className=\"name\"><strong>{props.firstName} {props.lastName}</strong></div>\r\n            <div className=\"phone\">{props.phone}</div>\r\n            <div className=\"gender\"><img src={props.gender} alt=\"\"/></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Contact;","import React from \"react\";\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div className=\"filter\">\r\n            <label>\r\n                <span>Search:</span>\r\n                <input type=\"text\" id=\"search-input\" value={props.search} onChange={props.searchChange} placeholder=\"Name or phone\"/>\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" className=\"checkbox\" id=\"male-checkbox\" onChange={props.toggleTick} defaultChecked=\"true\"/>\r\n                <img src={props.genderImg.male} alt=\"\"/>\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" className=\"checkbox\" id=\"female-checkbox\" onChange={props.toggleTick} defaultChecked=\"true\"/>\r\n                <img src={props.genderImg.female} alt=\"\"/>\r\n            </label>\r\n            <label id=\"undefined-gender-label\">\r\n                <input type=\"checkbox\" className=\"checkbox\" id=\"undefined-gender-checkbox\" onChange={props.toggleTick} defaultChecked=\"true\"/>\r\n                <img src={props.genderImg.anonymous} alt=\"\"/>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, { Component } from \"react\";\r\nimport \"./Contacts.css\";\r\nimport Contact from \"./Contact\";\r\nimport Search from \"./Search\";\r\nimport male from \"./images/male.svg\";\r\nimport female from \"./images/female.svg\";\r\nimport anonymous from \"./images/anonymous.svg\";\r\n\r\nconst contacts = [{\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовський\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Робін\",\r\n    lastName: \"Щербатська\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Анонімний\",\r\n    lastName: \"Анонімус\",\r\n    phone: \"+380666666666\",\r\n    gender: \"anonymous\"\r\n}, {\r\n    firstName: \"Лілія\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Маршен\",\r\n    lastName: \"Еріксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбес\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}];\r\n\r\nconst genderImg = {\r\n    male: male,\r\n    female: female,\r\n    anonymous: anonymous,\r\n}\r\n\r\nclass Contacts extends Component {\r\n    state = {\r\n        contacts: contacts,\r\n        filtered: contacts,\r\n        search: \"\",\r\n        \"male-checkbox\": true,\r\n        \"female-checkbox\": true,\r\n        \"undefined-gender-checkbox\": true,\r\n    }\r\n\r\n    filterContacts() {\r\n        this.setState((prevState) => {\r\n            return {\r\n                filtered: prevState.contacts.filter((contact) => {\r\n                    switch (contact.gender) {\r\n                        case \"male\":\r\n                            if (prevState[\"male-checkbox\"]) return contact;\r\n                            break;\r\n                        case \"female\":\r\n                            if (prevState[\"female-checkbox\"]) return contact;\r\n                            break;\r\n                        default:\r\n                            if (prevState[\"undefined-gender-checkbox\"]) return contact;\r\n                    }\r\n                }).filter((contact) => {\r\n                    return contact.lastName.toLowerCase().includes(prevState.search.toLowerCase()) ||\r\n                        contact.firstName.toLowerCase().includes(prevState.search.toLowerCase()) ||\r\n                        contact.phone.toLowerCase().includes(prevState.search.toLowerCase())\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    searchChange = (event) => {\r\n        this.setState({\r\n            search: event.target.value\r\n        });\r\n        this.filterContacts();\r\n    }\r\n\r\n    toggleTick = (event) => {\r\n        this.setState({\r\n            [event.target.id]: event.target.checked\r\n        });\r\n        this.filterContacts();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"contacts-wrapper\">\r\n                <Search\r\n                    search = { this.state.search }\r\n                    searchChange = { this.searchChange }\r\n                    toggleTick = { this.toggleTick }\r\n                    genderImg = { genderImg }\r\n                />\r\n                <div className=\"contacts\">\r\n                    {this.state.filtered.map((contact, index) => (\r\n                        <Contact\r\n                            firstName = { contact.firstName }\r\n                            lastName = { contact.lastName }\r\n                            phone = { contact.phone }\r\n                            gender = { genderImg[contact.gender] }\r\n                            key = { index }\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Contacts;","import React, { Component } from 'react';\nimport './App.css';\nimport Contacts from \"./Componets/Contacts/Contacts\";\n\nclass App extends Component{\n    render() {\n        return (\n            <div className=\"App\">\n                <Contacts />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}